// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/bigartists/Direwolf/client"
	"github.com/bigartists/Direwolf/internal/module/conversation"
	"github.com/bigartists/Direwolf/internal/module/maas"
	"github.com/bigartists/Direwolf/internal/module/message"
	"github.com/bigartists/Direwolf/internal/module/user"
	"github.com/bigartists/Direwolf/internal/routers"
	"github.com/bigartists/Direwolf/pkg/middlewares"
	"github.com/bigartists/Direwolf/server"
)

// Injectors from wire.go:

func InitializeApp() (*server.App, error) {
	db := client.ProvideDB()
	iUserRepo := user.ProvideUserRepo(db)
	iUserService := user.ProvideUserService(iUserRepo)
	userController := user.ProvideUserController(iUserService)
	iModelRepo := maas.ProvideMaasRepo(db)
	iMessageRepo := message.ProvideMessageRepo(db)
	iMessageService := message.ProvideMessageService(iMessageRepo, db)
	iConversationRepo := conversation.ProvideConversationRepo(db)
	iConversationService := conversation.ProvideConversationService(iConversationRepo)
	iMaasService := maas.ProvideMaasService(iModelRepo, iMessageService, iConversationService)
	maasController := maas.ProvideMaasController(iMaasService)
	conversationController := conversation.ProvideConversationController(iConversationService)
	authMiddleware := middlewares.NewAuthMiddleware(iUserRepo)
	engine := routers.ProvideRouter(userController, maasController, conversationController, authMiddleware)
	app := server.ProvideApp(engine)
	return app, nil
}
